{"version":3,"sources":["utils.js","Converter.js","App.js","serviceWorker.js","index.js"],"names":["crypto","require","chipher","polymod","values","GENERATOR","chk","p","length","top","i","getFirst160Bits","h","split","reduce","acc","parseInt","toString","substr","hex2bin","slice","convert","publicKey","Hx","message","createHash","update","digest","addr","match","H_5bit","output","push","to5Bit","checksum","data","mod","concat","ret","createChecksum","HCS","public_key","binary_address","Base32_address","addressBytes","map","byte","join","result","Converter","useState","setConversion","useEffect","className","src","theme","App","setPublicKey","alt","onChange","event","target","value","placeholder","autoComplete","href","rel","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.92ff1aa0.chunk.js","sourcesContent":["const crypto = require('crypto');\n\nconst chipher = [\n  'z', 'x', 'v', 'c', 'p', 'm', 'b', 'n', '3', '4', '6', '5', 'o', '9', '7', '8',\n  'u', 'y', 'r', 't', 'k', 'q', 'e', 'w', '2', 'a', 'd', 's', 'j', 'h', 'f', 'g'\n];\n\nfunction polymod(values) {\n  var GENERATOR = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\n  var chk = 1;\n  for (var p = 0; p < values.length; ++p) {\n    var top = chk >> 25;\n    chk = (chk & 0x1ffffff) << 5 ^ values[p];\n    for (var i = 0; i < 5; ++i) {\n      if ((top >> i) & 1) {\n        chk ^= GENERATOR[i];\n      }\n    }\n  }\n  return chk;\n}\n\nfunction createChecksum(data) {\n  var values = data.concat([0, 0, 0, 0, 0, 0]);\n  var mod = polymod(values) ^ 1;\n  var ret = [];\n  for (var p = 0; p < 6; ++p) {\n    ret.push((mod >> 5 * (5 - p)) & 31);\n  }\n  return ret;\n}\n\nfunction verifyChecksum(codeword) {\n  return polymod(codeword) === 1;\n}\n\n\nfunction toAddress(addressBytes) {\n  return \"lsk\" + addressBytes.map(byte => {\n    return chipher[byte];\n  }).join(\"\");\n}\n\nfunction hex2bin(h) {\n  return h.split('').reduce(function (acc, i) {\n    return acc + ('000' + parseInt(i, 16).toString(2)).substr(-4, 4);\n  }, '')\n}\n\nfunction bin2hex(b) {\n  return b.match(/.{4}/g).reduce(function (acc, i) {\n    return acc + parseInt(i, 2).toString(16);\n  }, '')\n}\n\nfunction getFirst160Bits(h) {\n  return hex2bin(h).slice(0, 160);\n}\n\nfunction to5Bit(h) {\n  let output = [];\n  for (let i = 0; i < h.length; i = i + 5) {\n    output.push(parseInt(h.slice(i, i + 5), 2));\n  }\n  return output;\n}\n\nfunction digestMessage(message) {\n  return crypto.createHash('sha256').update(message, 'hex').digest().toString('hex')\n}\n\nexport const convert = (publicKey) => {\n  if (publicKey.length === 64) {\n    const Hx = digestMessage(publicKey);\n    const addr = bin2hex(getFirst160Bits(Hx));\n    const H_5bit = to5Bit(getFirst160Bits(Hx));\n    const checksum = createChecksum(H_5bit);\n    const HCS = H_5bit.concat(...checksum);\n    if (verifyChecksum(HCS)) {\n      return {\n        public_key: '0x' + publicKey,\n        binary_address: '0x' + addr,\n        Base32_address: toAddress(HCS),\n      };\n    } else {\n      return {result: \"Invalid publicKey ???\"}\n    }\n  } else {\n    return {result: \"Invalid publicKey?\"}\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport ReactJson from 'react-json-view'\n\nimport {convert} from \"./utils\";\nexport const Converter = ({publicKey}) => {\n\n  const [result, setConversion] = useState({});\n  useEffect(() => {\n    if (publicKey) {\n      setConversion(convert(publicKey));\n    }\n  }, [publicKey]);\n\n  return (<div className=\"Result\">\n    <ReactJson src={result} theme=\"monokai\" />\n  </div>)\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Converter } from \"./Converter\";\n\nfunction App() {\n\n  const [publicKey, setPublicKey] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src=\"https://lisk.io/themes/custom/lisk_theme/logo.svg\" className=\"App-logo\" alt=\"logo\" />\n        <input onChange={(event) => setPublicKey(event.target.value)} value={publicKey} className=\"publicKey\" placeholder=\"Past here your Public key\" autoComplete={false} />\n        <Converter publicKey={publicKey} />\n        <div className=\"Links\">\n          <a href=\"https://explorer.lisk.io\" target=\"_blank\" rel=\"noopener noreferrer\">Explorer</a>\n          <a href=\"https://github.com/LiskHQ/lips/blob/master/proposals/lip-0018.md\" target=\"_blank\" rel=\"noopener noreferrer\">Lip 18</a>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}